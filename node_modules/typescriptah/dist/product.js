"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Product = void 0;
class Product {
    constructor(AHShopClient) {
        this.AHShopClient = AHShopClient;
    }
    getProductByURL(uri) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AHShopClient.get(uri);
        });
    }
    getProductByID(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.AHShopClient.get(`/producten/product/wi${id}`);
        });
    }
    getProductByName(productName, filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const totalQuery = {
                query: productName,
                sortBy: filter === null || filter === void 0 ? void 0 : filter.sortBy,
                page: filter === null || filter === void 0 ? void 0 : filter.page,
                size: filter === null || filter === void 0 ? void 0 : filter.size
            };
            // Remove undifined objects
            Object.keys(totalQuery).forEach(key => totalQuery[key] === undefined ? delete totalQuery[key] : {});
            if (filter)
                totalQuery['filters'] = this.productFilterToQuery(filter);
            return yield this.AHShopClient.get(`/zoeken/api/products/search?${new URLSearchParams(totalQuery)}`);
        });
    }
    productFilterToQuery(filter) {
        const out = [];
        if (filter.sortBy) {
            out.push(`sortBy=${filter.sortBy}`);
        }
        if (filter.property) {
            filter.property.forEach(prop => {
                out.push(`kenmerk=${prop}`);
            });
        }
        return out.join('&');
    }
}
exports.Product = Product;
