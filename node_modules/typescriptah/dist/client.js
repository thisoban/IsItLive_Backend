"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestMethod = exports.AHShopClient = void 0;
const product_1 = require("./product");
const https_1 = __importDefault(require("https"));
class AHShopClient {
    constructor() {
        this.hostname = "www.ah.nl";
        this.ahProduct = new product_1.Product(this);
    }
    product() {
        return this.ahProduct;
    }
    get(path) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(path, requestMethod.get);
        });
    }
    request(path, method) {
        return __awaiter(this, void 0, void 0, function* () {
            var options = {
                method,
                hostname: this.hostname,
                path,
                headers: {
                    "Content-Type": "application/json",
                },
            };
            return new Promise((resolve, reject) => {
                var req = https_1.default.request(options, function (res) {
                    var chunks = [];
                    res.on("data", function (chunk) {
                        chunks.push(chunk);
                    });
                    res.on("end", function (chunk) {
                        var body = Buffer.concat(chunks);
                        try {
                            return resolve(JSON.parse(body));
                        }
                        catch (err) {
                            return resolve(body.toString());
                        }
                    });
                    res.on("error", function (error) {
                        return reject(error);
                    });
                });
                req.end();
            });
        });
    }
}
exports.AHShopClient = AHShopClient;
var requestMethod;
(function (requestMethod) {
    requestMethod["get"] = "GET";
})(requestMethod = exports.requestMethod || (exports.requestMethod = {}));
